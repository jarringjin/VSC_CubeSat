ARM GAS  C:\msys64\tmp\cclSSAi5.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"dwt_delay.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.DWT_Init,"ax",%progbits
  20              		.align	1
  21              		.global	DWT_Init
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	DWT_Init:
  27              	.LFB141:
  28              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** /*
   2:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * Simple microseconds delay routine, utilizing ARM's DWT
   3:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * (Data Watchpoint and Trace Unit) and HAL library.
   4:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * Intended to use with gcc compiler, but I hope it can be used
   5:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * with any other C compiler across the Universe (provided that
   6:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * ARM and CMSIS already invented) :)
   7:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * Max K
   8:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  *
   9:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  *
  10:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * This file is part of DWT_Delay package.
  11:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * DWT_Delay is free software: you can redistribute it and/or modify it
  12:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * under the terms of the GNU General Public License as published by
  13:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * the Free Software Foundation, either version 3 of the License,
  14:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * or (at your option) any later version.
  15:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  *
  16:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * us_delay is distributed in the hope that it will be useful,
  17:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty
  18:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
  19:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * the GNU General Public License for more details.
  20:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * http://www.gnu.org/licenses/.
  21:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  */
  22:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** 
  23:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** #include "stm32f7xx_hal.h"          // change to whatever MCU you use
  24:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** #include "dwt_delay.h"
  25:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** 
  26:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** /**
  27:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * Initialization routine.
  28:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * You might need to enable access to DWT registers on Cortex-M7
  29:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  *   DWT->LAR = 0xC5ACCE55
  30:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  */
ARM GAS  C:\msys64\tmp\cclSSAi5.s 			page 2


  31:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** void DWT_Init(void)
  32:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** {
  29              		.loc 1 32 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  33:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
  34              		.loc 1 33 5 view .LVU1
  35              		.loc 1 33 20 is_stmt 0 view .LVU2
  36 0000 0A4B     		ldr	r3, .L3
  37 0002 D3F8FC30 		ldr	r3, [r3, #252]
  38              		.loc 1 33 8 view .LVU3
  39 0006 13F0807F 		tst	r3, #16777216
  40 000a 0DD1     		bne	.L1
  34:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****         CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  41              		.loc 1 34 9 is_stmt 1 view .LVU4
  42              		.loc 1 34 26 is_stmt 0 view .LVU5
  43 000c 074A     		ldr	r2, .L3
  44 000e D2F8FC30 		ldr	r3, [r2, #252]
  45 0012 43F08073 		orr	r3, r3, #16777216
  46 0016 C2F8FC30 		str	r3, [r2, #252]
  35:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****         DWT->CYCCNT = 0;
  47              		.loc 1 35 9 is_stmt 1 view .LVU6
  48              		.loc 1 35 21 is_stmt 0 view .LVU7
  49 001a 054B     		ldr	r3, .L3+4
  50 001c 0022     		movs	r2, #0
  51 001e 5A60     		str	r2, [r3, #4]
  36:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****         DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  52              		.loc 1 36 9 is_stmt 1 view .LVU8
  53              		.loc 1 36 19 is_stmt 0 view .LVU9
  54 0020 1A68     		ldr	r2, [r3]
  55 0022 42F00102 		orr	r2, r2, #1
  56 0026 1A60     		str	r2, [r3]
  57              	.L1:
  37:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     }
  38:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** }
  58              		.loc 1 38 1 view .LVU10
  59 0028 7047     		bx	lr
  60              	.L4:
  61 002a 00BF     		.align	2
  62              	.L3:
  63 002c 00ED00E0 		.word	-536810240
  64 0030 001000E0 		.word	-536866816
  65              		.cfi_endproc
  66              	.LFE141:
  68              		.section	.text.DWT_Delay,"ax",%progbits
  69              		.align	1
  70              		.global	DWT_Delay
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  75              	DWT_Delay:
  76              	.LVL0:
  77              	.LFB142:
  39:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** 
  40:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** #if DWT_DELAY_NEWBIE
ARM GAS  C:\msys64\tmp\cclSSAi5.s 			page 3


  41:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** /**
  42:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * If you are a newbie and see magic in DWT_Delay, consider this more
  43:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * illustrative function, where you explicitly determine a counter
  44:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * value when delay should stop while keeping things in bounds of uint32.
  45:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** */
  46:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** void DWT_Delay(uint32_t us) // microseconds
  47:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** {
  48:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     uint32_t startTick  = DWT->CYCCNT,
  49:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****              targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
  50:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** 
  51:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     // Must check if target tick is out of bounds and overflowed
  52:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     if (targetTick > startTick) {
  53:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****         // Not overflowed
  54:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****         while (DWT->CYCCNT < targetTick);
  55:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     } else {
  56:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****         // Overflowed
  57:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****         while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
  58:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     }
  59:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** }
  60:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** #else
  61:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** /**
  62:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * Delay routine itself.
  63:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * Time is in microseconds (1/1000000th of a second), not to be
  64:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * confused with millisecond (1/1000th).
  65:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  *
  66:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * No need to check an overflow. Let it just tick :)
  67:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  *
  68:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  * @param uint32_t us  Number of microseconds to delay for
  69:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****  */
  70:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** void DWT_Delay(uint32_t us) // microseconds
  71:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** {
  78              		.loc 1 71 1 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  72:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     uint32_t startTick = DWT->CYCCNT,
  83              		.loc 1 72 5 view .LVU12
  84              		.loc 1 72 14 is_stmt 0 view .LVU13
  85 0000 074B     		ldr	r3, .L7
  86 0002 5A68     		ldr	r2, [r3, #4]
  87              	.LVL1:
  73:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****              delayTicks = us * (SystemCoreClock/1000000);
  88              		.loc 1 73 48 view .LVU14
  89 0004 074B     		ldr	r3, .L7+4
  90 0006 1B68     		ldr	r3, [r3]
  91 0008 0749     		ldr	r1, .L7+8
  92 000a A1FB0313 		umull	r1, r3, r1, r3
  93 000e 9B0C     		lsrs	r3, r3, #18
  94              		.loc 1 73 14 view .LVU15
  95 0010 03FB00F0 		mul	r0, r3, r0
  96              	.LVL2:
  74:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** 
  75:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c ****     while (DWT->CYCCNT - startTick < delayTicks);
  97              		.loc 1 75 5 is_stmt 1 view .LVU16
  98              	.L6:
  99              		.loc 1 75 49 discriminator 1 view .LVU17
ARM GAS  C:\msys64\tmp\cclSSAi5.s 			page 4


 100              		.loc 1 75 11 discriminator 1 view .LVU18
 101              		.loc 1 75 15 is_stmt 0 discriminator 1 view .LVU19
 102 0014 024B     		ldr	r3, .L7
 103 0016 5B68     		ldr	r3, [r3, #4]
 104              		.loc 1 75 24 discriminator 1 view .LVU20
 105 0018 9B1A     		subs	r3, r3, r2
 106              		.loc 1 75 11 discriminator 1 view .LVU21
 107 001a 8342     		cmp	r3, r0
 108 001c FAD3     		bcc	.L6
  76:Drivers/STM32F7xx_HAL_Driver/Src/dwt_delay.c **** }
 109              		.loc 1 76 1 view .LVU22
 110 001e 7047     		bx	lr
 111              	.L8:
 112              		.align	2
 113              	.L7:
 114 0020 001000E0 		.word	-536866816
 115 0024 00000000 		.word	SystemCoreClock
 116 0028 83DE1B43 		.word	1125899907
 117              		.cfi_endproc
 118              	.LFE142:
 120              		.text
 121              	.Letext0:
 122              		.file 2 "c:\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\machine\\_default_typ
 123              		.file 3 "c:\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 124              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 125              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
ARM GAS  C:\msys64\tmp\cclSSAi5.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 dwt_delay.c
C:\msys64\tmp\cclSSAi5.s:20     .text.DWT_Init:00000000 $t
C:\msys64\tmp\cclSSAi5.s:26     .text.DWT_Init:00000000 DWT_Init
C:\msys64\tmp\cclSSAi5.s:63     .text.DWT_Init:0000002c $d
C:\msys64\tmp\cclSSAi5.s:69     .text.DWT_Delay:00000000 $t
C:\msys64\tmp\cclSSAi5.s:75     .text.DWT_Delay:00000000 DWT_Delay
C:\msys64\tmp\cclSSAi5.s:114    .text.DWT_Delay:00000020 $d

UNDEFINED SYMBOLS
SystemCoreClock
